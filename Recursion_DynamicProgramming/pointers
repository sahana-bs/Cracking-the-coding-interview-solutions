-A problem has a recursive solution if it is built of sub-problems
-The more you practice, the better you get at recognizing recursive problems
-Recursive algorithms can be very space inefficient. Each recursive call adds a new layer to the stack, which
means that if your algorithm recurses to a depth of n, it uses at least O (n) memory
-Always think of the trade off between this space and complexity of implementing this iteratively
-Often good candidates for recursion:
"Design an algorithm to compute the nth ..:;
"Write code to list the first n ..:;
"Implement a method to compute all..:;

Drawing the code paths as a tree (that is, the recursion tree) is useful on this and many recursive problems.
**The total number of nodes in the tree will represent the runtime, since each call only does 0(1) work
outside of its recursive calls. Therefore, the number of calls is the runtime.**

Ways of solving a recursive problem:
1. Top down approach
The top-down approach can be more complex since it's less concrete.
But sometimes, it's the best way to think about the problem.
In these problems, we think about how we can divide the problem for case N into subproblems

2. Bottom up approach
The bottom-up approach is often the most intuitive.
We start with knowing how to solve the problem for a simple case, like a list with only one element.
Then we figure out how to solve the problem for two elements, then for three elements, and so on.
The key here is to think about how you can build the solution for one case off of the previous case

3. Half-and-Half Approach
In addition to top-down and bottom-up approaches, it's often effective to divide the data set in half.
eg., Binary search, merge sort



DYNAMIC PROGRAMMING
Dynamic programming is mostly just a matter of taking a recursive algorithm and finding the overlapping
subproblems (that is, the repeated calls). You then cache those results for future recursive calls.

*******DP can bring recursive problems with complexity O(2^N) to O(N) *************

For a DP solution, basically, we need two things:

The base case.
This is where our dp start. Usually, this means how to calculate dp[0]. In our case, score[0] = nums[0] since nums[0] is both our start and end. We only have one choice.

The so-called transition equation.
That is to say, if we have already calculated score[0], score[1], ..., score[i-1], how can we calculate score[i]?

```
You know it is recursion if there are subproblems that are repetitive.
```
```
YOu know it is a dynamic programming problem when there is optimal substructure..(beauty!)
```
