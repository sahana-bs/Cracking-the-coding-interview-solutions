-Does not provide constant time access unlike arrays.
-Will traverse across k elements to find the kth element.
-Should consider if the removed node Should be reallocated?
-In an interview be sure to clarify if they mean a sll or a dll


-Remember while using ll(single/double), pointers and recursion are the two most important concepts by which we can solve any problem
Then why use ll?
-It gives the benefit of adding the elements at the beginning and the end of the list at constant time***
-After finishing recursion, visit ll, they are closely related.
-shifting and swapping in a linked list does not make sense. If such a case arises, create seperate ll and merge them.

-Another concept that can be used to solve some ll based problems is the "running pointers" concept. The runner technique
means that you iterate through the linked list with two pointers simultaneously, with one ahead of the
other. The "fast" node might be ahead by a fixed amount, or it might be hopping multiple nodes for each
one node that the"slow" node iterates through.
